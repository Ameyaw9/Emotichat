# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import emotichat_pb2 as emotichat__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in emotichat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class emotichatStub(object):
    """Core service for EmotiChat emotional wellness system
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeEmotion = channel.unary_unary(
                '/emotichat.emotichat/AnalyzeEmotion',
                request_serializer=emotichat__pb2.VoiceTextRequest.SerializeToString,
                response_deserializer=emotichat__pb2.EmotionAnalysisResponse.FromString,
                _registered_method=True)
        self.GetRecommendedTherapy = channel.unary_unary(
                '/emotichat.emotichat/GetRecommendedTherapy',
                request_serializer=emotichat__pb2.EmotionRequest.SerializeToString,
                response_deserializer=emotichat__pb2.TherapyRecommendationResponse.FromString,
                _registered_method=True)
        self.StartBreathingSession = channel.unary_unary(
                '/emotichat.emotichat/StartBreathingSession',
                request_serializer=emotichat__pb2.BreathingSessionRequest.SerializeToString,
                response_deserializer=emotichat__pb2.BreathingGuideResponse.FromString,
                _registered_method=True)
        self.GetInspirationalQuote = channel.unary_unary(
                '/emotichat.emotichat/GetInspirationalQuote',
                request_serializer=emotichat__pb2.QuoteRequest.SerializeToString,
                response_deserializer=emotichat__pb2.QuoteResponse.FromString,
                _registered_method=True)
        self.LogUserInteraction = channel.unary_unary(
                '/emotichat.emotichat/LogUserInteraction',
                request_serializer=emotichat__pb2.UserInteractionRequest.SerializeToString,
                response_deserializer=emotichat__pb2.InteractionLogResponse.FromString,
                _registered_method=True)
        self.GetSessionSummary = channel.unary_unary(
                '/emotichat.emotichat/GetSessionSummary',
                request_serializer=emotichat__pb2.SessionSummaryRequest.SerializeToString,
                response_deserializer=emotichat__pb2.SessionSummaryResponse.FromString,
                _registered_method=True)


class emotichatServicer(object):
    """Core service for EmotiChat emotional wellness system
    """

    def AnalyzeEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecommendedTherapy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBreathingSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInspirationalQuote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogUserInteraction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_emotichatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeEmotion,
                    request_deserializer=emotichat__pb2.VoiceTextRequest.FromString,
                    response_serializer=emotichat__pb2.EmotionAnalysisResponse.SerializeToString,
            ),
            'GetRecommendedTherapy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendedTherapy,
                    request_deserializer=emotichat__pb2.EmotionRequest.FromString,
                    response_serializer=emotichat__pb2.TherapyRecommendationResponse.SerializeToString,
            ),
            'StartBreathingSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBreathingSession,
                    request_deserializer=emotichat__pb2.BreathingSessionRequest.FromString,
                    response_serializer=emotichat__pb2.BreathingGuideResponse.SerializeToString,
            ),
            'GetInspirationalQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInspirationalQuote,
                    request_deserializer=emotichat__pb2.QuoteRequest.FromString,
                    response_serializer=emotichat__pb2.QuoteResponse.SerializeToString,
            ),
            'LogUserInteraction': grpc.unary_unary_rpc_method_handler(
                    servicer.LogUserInteraction,
                    request_deserializer=emotichat__pb2.UserInteractionRequest.FromString,
                    response_serializer=emotichat__pb2.InteractionLogResponse.SerializeToString,
            ),
            'GetSessionSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionSummary,
                    request_deserializer=emotichat__pb2.SessionSummaryRequest.FromString,
                    response_serializer=emotichat__pb2.SessionSummaryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'emotichat.emotichat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('emotichat.emotichat', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class emotichat(object):
    """Core service for EmotiChat emotional wellness system
    """

    @staticmethod
    def AnalyzeEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/AnalyzeEmotion',
            emotichat__pb2.VoiceTextRequest.SerializeToString,
            emotichat__pb2.EmotionAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecommendedTherapy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/GetRecommendedTherapy',
            emotichat__pb2.EmotionRequest.SerializeToString,
            emotichat__pb2.TherapyRecommendationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartBreathingSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/StartBreathingSession',
            emotichat__pb2.BreathingSessionRequest.SerializeToString,
            emotichat__pb2.BreathingGuideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInspirationalQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/GetInspirationalQuote',
            emotichat__pb2.QuoteRequest.SerializeToString,
            emotichat__pb2.QuoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogUserInteraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/LogUserInteraction',
            emotichat__pb2.UserInteractionRequest.SerializeToString,
            emotichat__pb2.InteractionLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSessionSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/emotichat.emotichat/GetSessionSummary',
            emotichat__pb2.SessionSummaryRequest.SerializeToString,
            emotichat__pb2.SessionSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
